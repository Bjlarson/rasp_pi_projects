import time
import machine
import mpu6050
from pca9685 import PCA9685

# Initialize MPU6050 on I2C 0
i2c_mpu = machine.I2C(0, scl=machine.Pin(9), sda=machine.Pin(8))
mpu = mpu6050.MPU6050(i2c_mpu)

# Initialize PCA9685 on I2C 1
i2c_pca = machine.I2C(1, scl=machine.Pin(3), sda=machine.Pin(2))
pca = PCA9685.PCA9685(i2c_pca)
pca.freq(50)  # Set PWM frequency to 50Hz

# Define motor channels
motor_channel_1 = 0
motor_channel_2 = 1
motor_channel_3 = 2
motor_channel_4 = 3

# PID controller gains
Kp = 0.5
Ki = 0.1
Kd = 0.1

# Setpoint (target) values
target_pitch = 0.0
target_roll = 0.0
target_yaw = 0.0

# Initialize error and integral variables
error_sum_pitch = 0.0
error_sum_roll = 0.0
error_sum_yaw = 0.0
last_error_pitch = 0.0
last_error_roll = 0.0
last_error_yaw = 0.0

# Main loop
while True:
    # Read gyroscope and accelerometer data from MPU6050
    gyro_data = mpu.gyro
    accel_data = mpu.acceleration

    # Calculate errors
    error_pitch = target_pitch - accel_data[1]
    error_roll = target_roll - accel_data[0]
    error_yaw = target_yaw - gyro_data[2]

    # Calculate PID control signals
    control_signal_pitch = Kp * error_pitch + Ki * error_sum_pitch + Kd * (error_pitch - last_error_pitch)
    control_signal_roll = Kp * error_roll + Ki * error_sum_roll + Kd * (error_roll - last_error_roll)
    control_signal_yaw = Kp * error_yaw + Ki * error_sum_yaw + Kd * (error_yaw - last_error_yaw)

    # Adjust motor speeds using PCA9685
    motor_speed_1 = 1000 + control_signal_pitch + control_signal_roll + control_signal_yaw
    motor_speed_2 = 1000 + control_signal_pitch - control_signal_roll - control_signal_yaw
    motor_speed_3 = 1000 - control_signal_pitch - control_signal_roll + control_signal_yaw
    motor_speed_4 = 1000 - control_signal_pitch + control_signal_roll - control_signal_yaw

    pca.duty(motor_channel_1, int(motor_speed_1))
    pca.duty(motor_channel_2, int(motor_speed_2))
    pca.duty(motor_channel_3, int(motor_speed_3))
    pca.duty(motor_channel_4, int(motor_speed_4))

    # Update error and integral variables
    error_sum_pitch += error_pitch
    error_sum_roll += error_roll
    error_sum_yaw += error_yaw
    last_error_pitch = error_pitch
    last_error_roll = error_roll
    last_error_yaw = error_yaw

    # Delay before the next iteration
    time.sleep(0.01)
